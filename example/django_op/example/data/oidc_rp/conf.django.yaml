logging:
  version: 1
  disable_existing_loggers: False
  root:
    handlers:
      - default
      - console
    level: DEBUG
  loggers:
    idp:
      level: DEBUG
  handlers:
    default:
      class: logging.FileHandler
      filename: 'debug.log'
      formatter: default
    console:
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'
      formatter: default
  formatters:
    default:
      format: '%(asctime)s %(name)s %(levelname)s %(message)s'

port: 8099
base_url: "https://127.0.0.1:8099"

# If BASE is https these has to be specified
webserver:
  port: '{port}'
  server_cert: "certs/cert.pem"
  server_key: "certs/key.pem"
  domain: '{domain}'

# This is just for testing an local usage. In all other cases it MUST be True
httpc_params:
  verify: False

key_defs: &keydef
  -
    "type": "RSA"
    "key": ''
    "use": ["sig"]
  -
    "type": "EC"
    "crv": "P-256"
    "use": ["sig"]

# html_home: 'html'
# secret_key: 'secret_key'
# session_cookie_name: 'rp_session'
# preferred_url_scheme: 'https'

rp_keys:
    'private_path': './private/jwks.json'
    'key_defs': *keydef
    'public_path': './static/jwks.json'
    # this will create the jwks files if they absent
    'read_only': False

# information used when registering the client, this may be the same for all OPs
client_preferences: &prefs
    application_name: rp_test
    application_type: web
    contacts:
        - ops@example.com
    response_types:
        - code
    scope:
        - openid
        - that_scope
        - profile
        - email
        - address
        - phone
    token_endpoint_auth_method:
        - client_secret_basic
        - client_secret_post

services: &services
  discovery: &disc
    class: oidcservice.oidc.provider_info_discovery.ProviderInfoDiscovery
    kwargs: {}
  registration: &regist
    class: oidcservice.oidc.registration.Registration
    kwargs: {}
  authorization: &authz
    class: oidcservice.oidc.authorization.Authorization
    kwargs: {}
  accesstoken: &acctok
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: {}
  userinfo: &userinfo
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: {}
  end_session: &sess
    class: oidcservice.oidc.end_session.EndSession
    kwargs: {}

clients:
  # The ones that support webfinger, OP discovery and client registration
  # This is the default, any client that is not listed here is expected to
  # support dynamic discovery and registration.
  "":
    client_preferences: *prefs
    redirect_uris: None
    services: *services

  django_oidc_op:
    client_preferences: *prefs

    # if you create a client through ADMIN UI ...
    #client_id: 1UUl6cwNigmj
    #client_secret: 78be88872d5877c4ddb209335f4eb2fc5118a481a195a454c8b2ebcb
    # this redirect_uri must be statically configured in op's rp cdb!
    redirect_uris:
      - https://127.0.0.1:8099/authz_cb/django_oidc_op
    issuer: https://127.0.0.1:8000/
    jwks_uri: https://127.0.0.1:8099/static/jwks.json

    services:
      discovery: *disc
      registration: *regist
      authorization: *authz
      accesstoken: *acctok
      userinfo: *userinfo
      end_session: *sess
    add_ons:
      pkce:
        function: oidcservice.oidc.add_on.pkce.add_pkce_support
        kwargs:
          code_challenge_length: 64
          code_challenge_method: S256

  shib_oidc_op:
    client_preferences: *prefs

    # if you create a client through ADMIN UI ...
    client_id: demo_rp
    client_secret: topsecret2020_______
    # this redirect_uri must be statically configured in op's rp cdb!
    redirect_uris:
      - https://127.0.0.1:8099/authz_cb/shib_oidc_op
    issuer: https://idp.testunical.it/
    jwks_uri: https://127.0.0.1:8099/static/jwks.json

    services:
      discovery: *disc
      registration: *regist
      authorization: *authz
      accesstoken: *acctok
      userinfo: *userinfo
      end_session: *sess
    add_ons:
      pkce:
        function: oidcservice.oidc.add_on.pkce.add_pkce_support
        kwargs:
          code_challenge_length: 64
          code_challenge_method: S256
